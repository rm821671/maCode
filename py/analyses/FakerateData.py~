
import sys
sys.path.insert(0,"../../py")

import ROOT as rt
from modules import lib_plot as lp
from modules import auxiliary as aux
from modules import filemanager as fm

import time
import datetime as dt


def drawer(h, fs, *opt):
	# histogram and filesaver object
	
	name = h.GetName()
	drawmode = ""
	
	csize = 800
	
	if not opt:
		c = rt.TCanvas("c_"+name,"c_"+name,csize,csize)
	else:
		c = rt.TCanvas("c_"+str(opt[0])+"_"+name,"c_"+str(opt[0])+"_"+name,csize,csize)
	
	c.SetRightMargin(0.15)
	c.cd()	
	
	if isinstance(h, rt.TH1):
		#print "TH1#"
		ht = h.Clone()
		drawmode = "hist"
		ht.Draw(drawmode)
	
	if isinstance(h, rt.TH2):
		#print "TH2#"
		ht = h.Clone()
		drawmode = "colz"
		ht.Draw(drawmode)
		
		
	
	if isinstance(h, rt.THStack):
		#print "is stack!"
		#ht = h.GetLast()
		h.Draw()
	
	c.Update()
	
	fs.save(c, name)
	
	



def plot_raw(stacks, data,legends,fs):
	
	#print "stack: ",stack
	#print "legend: ",legend
	#print "data: ",data
	
	
	for key in data:
		drawer(data[key], fs)
		
	for key in stacks:
		drawer(stacks[key], fs, "mc")
	


def fakerate(hproj, fs):
	# produce efficiencies
	
	
	
	
	
	
	pass
	
	


def calc_histos(hproj):
	
	variables = ["pt","nvtx","njet"]
	
	bins = {"pt": [0, 250], "nvtx": [0, 60], "njet": [0, 15]}
	
	data = {	"pt": 	{	"tot": 0, 
							"pas": 0},
				"nvtx": {	"tot": 0, 
							"pas": 0},
				"njet": {	"tot": 0, 
							"pas": 0}
					}
	mc = 	{	"pt": 	{	"tot": 0, 
							"pas": 0},
				"nvtx": {	"tot": 0, 
							"pas": 0},
				"njet": {	"tot": 0, 
							"pas": 0}
					}
	
	for key in data.keys():
		for inner in data[key].keys():
			data[key][inner] = rt.TH1F("data"+str(key)+str(inner),str(key)+str(inner),
										bins[key][1], bins[key][0], bins[key][1])
			mc[key][inner] = rt.TH1F("mc"+str(key)+str(inner),str(key)+str(inner),
										bins[key][1], bins[key][0], bins[key][1])
	
	rng = [80, 100] # integral range
	
	# data:
	tag = "data"
	for variable in variables:
		for inner in data[variable].keys():
			for histo in hproj[tag][variable][inner]:
				name = histo.GetName()
				splitname = name.split("_")
				nbin = int(splitname[len(splitname)-1]) # last element is the bin number
				if histo.GetEntries() != 0:
					zint = histo.Integral(rng[0], rng[1])
					data[variable][inner].SetBinContent(nbin, zint)
		
	tag = "mc"
	for variable in variables:
		for inner in mc[variable].keys():
			for histo in hproj[tag][variable][inner]:
				name = histo.GetName()
				splitname = name.split("_")
				nbin = int(splitname[len(splitname)-1]) # last element is the bin number
				if histo.GetEntries() != 0:
					zint = histo.Integral(rng[0], rng[1])
					mc[variable][inner].SetBinContent(nbin, zint)
	
	return data, mc
	


def projections(stacks, data, legends, fs):
	
	import copy
	hvariables = {	"pt": 	{	"tot": [], 
								"pas": []},
					"nvtx": {	"tot": [], 
								"pas": []},
					"njet": {	"tot": [], 
								"pas": []}
					}
	
	# initialize histogram dictionary
	hproj = {	"data":	copy.deepcopy(hvariables), 
				"mc":	copy.deepcopy(hvariables)
			}
	
	# initialize histograms
	hpt = {	"data": {	"tot": [], 
						"pas": []}, 
			"mc": {		"tot": [], 
						"pas": []}}
						
	hnvtx = hpt
	hnjet = hpt
	
	off = 0
	ranges = {	"pt": range(off, 250+off),
				"nvtx": range(off,60+off),
				"njet": range(off,15+off)
			}
	
	variables = ["pt","nvtx","njet"]
	
	# get stacked histograms from the montecarlo samples
	# Float_t binContent = ((TH1*)(stack->GetStack()->Last()))->GetBinContent(ibin);
	mc = dict.fromkeys(stacks.keys())
	mclist = dict.fromkeys(stacks.keys())
	for key in mc.keys():
		mc[key] = stacks[key].GetStack().Last()
		mclist[key] = stacks[key].GetStack()
	
	# how to get the single histograms from stack:
	#for key in mclist.keys():
	#	for ob in range(mclist[key].GetEntries()):
	#		print ob, " histo: ", mclist[key].At(ob)
	
	
	#print "mc:", mc
	
	
	# ProjectionX (const char *name="_px", Int_t firstybin=0,
	#				 Int_t lastybin=-1, Option_t *option="")
	def projdata(h, *index):
		# h should be the defined histogram dictionaries
		# hpt, hnvtx or hnjet
		isdata = "data"
		for key in data.keys():
			for variable in variables:
				if variable in key:
					tag = "tot"
					if tag in key:
						for b in ranges[variable]:
							htemp = data[key].ProjectionX(
													variable+"_"+tag+"_"+str(b), b, b)
							htemp.SetDirectory(0)
							h[isdata][variable][tag].append(htemp)
					tag = "pas"
					if tag in key:
						for b in ranges[variable]:
							htemp = data[key].ProjectionX(
													variable+"_"+tag+"_"+str(b), b, b)
							htemp.SetDirectory(0)
							h[isdata][variable][tag].append(htemp)
		return h
	
	def projmc(h):
		# h should be the defined histogram dictionaries
		# hpt, hnvtx or hnjet
		isdata = "mc"
		for key in mc.keys():
			for variable in variables:
				if variable in key:
					tag = "tot"
					if tag in key:
						for b in ranges[variable]:
							htemp = data[key].ProjectionX(
													variable+"_"+tag+"_"+str(b), b, b)
							htemp.SetDirectory(0)
							h[isdata][variable][tag].append(htemp)
					tag = "pas"
					if tag in key:
						for b in ranges[variable]:
							htemp = data[key].ProjectionX(
													variable+"_"+tag+"_"+str(b), b, b)
							htemp.SetDirectory(0)
							h[isdata][variable][tag].append(htemp)
		return h
	
	
	hproj = projdata(hproj)
	hproj = projmc(hproj)
	
	#print hproj
	
	#hnvtx = projdata(hnvtx)
	return hproj





def hstack(h):
	# build a stack of the monte carlo
	# add up both data
	
	datakeys = {	"DYJetsToLL": 0,
					"TTGJets": 2,
					"WGToLNuG": 4,
					"ZGTo2LG": 6,
					"Run2015D-05Oct2015": 0,
					"Run2015D-PromptReco": 1
			}
	
	defcolor = {	0: rt.kGreen}
	colorindex = 0
	
	# initialize stack, legend
	stacks = {}	# stack for mc
	l = {}		# legend for mc
	dh = {}		# data
	dtemp = {}
	
	# 
	for key in h.keys():
		if h[key]:
			#print h[key]
			stacks = dict.fromkeys(h[key].keys())
			l = dict.fromkeys(h[key].keys())
	
	
	for key in stacks.keys():
		stacks[key] = rt.THStack(key, "")
		l[key] = rt.TLegend(0.9,0.7,0.65,0.9)
		dh[key] = {}
		
	
	# scale montecarlo samples and add to stack,
	# if data, add up
	for key in h.keys():
		if "Run2015" not in key: # mc
			scaling = aux.giveMClumiScalefactor(key)
			for his in h[key].keys():
				#print key, his
				h[key][his].Scale(scaling)
				h[key][his].SetFillColor(defcolor[colorindex]+datakeys[key])
				h[key][his].SetLineColor(defcolor[colorindex]+datakeys[key])
				l[his].AddEntry(h[key][his], key)
				stacks[his].Add(h[key][his])
		
		if "Run2015D-05Oct2015" in key:
			for his in h[key].keys():
				dh[his][key] = h[key][his]
				dh[his][key].SetMarkerStyle(20) # full square
				dh[his][key].SetMarkerColor(rt.kBlack)
				l[his].AddEntry(h[key][his], key)
		
		if "Run2015D-PromptReco" in key:
			for his in h[key].keys():
				dh[his][key] = h[key][his]
	
	# add reco and prompt reco
	for key in dh.keys():
		dh[key]["Run2015D-05Oct2015"].Add(dh[key]["Run2015D-PromptReco"])
	
	for key in dh.keys():
		dtemp[key] = dh[key]["Run2015D-05Oct2015"].Clone()
	
	#print stacks
	#print dh
	#print dtemp
	
	return stacks, dtemp, l
	


def plotloop(stacks, data, legends):
	
	s = stacks.keys()[0]
	d = data.keys()[0]
	l = legends.keys()[0]
	
	plot_raw(stacks[s], legends[l], data[d])
	


def main():
	
	rt.gROOT.SetBatch(rt.kTRUE)	# dont show the canvases
	
	# file object
	_fm = fm.FileManager()
	print "system path:", _fm.path
	
	# h is empty atm
	h, h2 = _fm.readHisto(lines=6)
	
	stacks, data, legends = hstack(h2)
	
	# create a file saver
	tstr = str(dt.datetime.now()).replace(" ", "_").replace(":","-").split(".")[0]
	print "tstr: ", tstr
	_fs = fm.FileSaver("fakerate.root",tstr,_fm)
	
	hproj = projections(stacks, data, legends, _fs)
	
	dat, mc = calc_histos(hproj)
	
	print dat
	
	#raw_input("press any key to finish")
	return 0





if __name__ == "__main__":
	main()
